Exercise: Dynamic Styles
Your task is to dynamically apply a style (color: red) to the <p>Style me</p> element in the provided React app.

The style should be applied as an inline style (i.e., via the style attribute / prop) when the <button> is clicked for the first time. Once the button is clicked again, the styling should switch back to color: white, which should also be the initial style.

Make sure that the button toggles between these two styles (color: white <=> color: red).

Here's how the finished app should look like BEFORE the button was clicked:

Here's how it should look like AFTER the button was clicked:



And here's how it should look like when the button was clicked again:


Important: Use React.useState() instead of just useState() as the latter can cause problems in this Udemy code environment.

LEARNING OBJECTIVE
Apply CSS styles dynamically to HTML elements.


--------------
HINTS
Keep in mind that, when using the style prop, you should assign an object as a value - not a string

You can, for example, set values dynamically in the style prop object via a ternary expression

You will need some state that's changed upon button clicks to update the style


-------------------
SOLUTION EXPLANATION
For this task, you need some state that changes whenever the button is clicked - this state can then be used to derive and set the inline styling dynamically.

Therefore, as a first step, add some state like this (to the App component function):

const [highlighted, setHighlighted] = React.useState(false);


This highlighted state should be changed whenever the <button> is clicked - hence the onClick prop and a fitting function (e.g., named clickHandler) is required:

export default function App() {
    const [highlighted, setHighlighted] = React.useState(false);
    
    function clickHandler() {
        setHighlighted(isHighlighted => !isHighlighted);
    }
    
    return (
        <div>
            <p>Style me!</p>
            <button onClick={clickHandler}>Toggle style</button>
        </div>
    );
}
Important: Here, the setHighlighted() state updating function uses a function to set the new state - this is done to follow the common best practice of using such a function if the new state is based on the previous state. Here, the new state is the opposite of the old state (!isHighlighted sets true to false and vice versa).



Finally, it's time to set the text color of the <p> element dynamically - for this task, as requested, by dynamically applying an inline style:

import React from 'react';
 
// don't change the Component name "App"
export default function App() {
    const [highlighted, setHighlighted] = React.useState(false);
    
    function clickHandler() {
        setHighlighted(isHighlighted => !isHighlighted);
    }
    
    return (
        <div>
            <p style={{color: highlighted ? 'red' : 'white'}}>Style me!</p>
            <button onClick={clickHandler}>Toggle style</button>
        </div>
    );
}
Important: This is not some special syntax that would require double curly braces! Instead, the style prop is set to a non-string value (hence curly braces are required). In this case, the value is a JavaScript object that contains the CSS style properties - hence the second pair of curly braces (JS objects can be created via curly braces).