Exercise: Outputting Conditional Content
You're working on a part of a web app that's responsible for showing a warning when a user is about to perform a dangerous action.

Therefore, your task is to conditionally show a warning box once a user has clicked a specific button. Inside that warning dialog, another button allows users to dismiss the warning (i.e., remove the warning box from the screen).

The finished app should display this UI, if the <button> has not been clicked yet:

And this UI, once the button was clicked:

Once the "Proceed" button was clicked, the warning box should be removed again:



For this task, you must react to clicks on both <button> elements that are part of the starting code. The second button, outside of the <div> with the id="alert", should show the <div id="alert"> (and all its content). The button inside that <div> should then hide it again (i.e., remove it from the DOM).

It's up to you whether you want to use a ternary expression or store the conditionally shown JSX code in a variable.

Important: In this Udemy code editor you may get an error if you use useState() - use React.useState() instead!

LEARNING OBJECTIVE: 
Show (and hide) content dynamically.

----------------------------
HINTS
You will need to work with some "should the warning be shown?" state (via React.useState()) for this exercise

You could manage an isDeleting state value that's either true (in which case the warning box is shown) or false (in which case it's not shown)

This state must be updated (and set to the appropriate value) whenever the two <button>s are clicked

Based on the isDeleting state (or however you named it) you should include or exclude the <div id="alert">...</div> JSX code (e.g., via a variable or ternary expression)

---------------------------------
SOLUTION EXPLANATION

For this task, you need some state that controls whether the warning box is visible or not. Hence, the first step is to register such an isDeleting state that's either true (the box will be shown) or false (it will not be shown). Of course, you could use any other state name of your choice:

const [isDeleting, setIsDeleting] = React.useState(false);


This state should be set to true (to later show the warning dialog) whenever the "Delete" <button> is clicked. To achieve this, the onClick prop is added and set to a function that updates the isDeleting state accordingly:

import React from 'react';
 
// don't change the Component name "App"
export default function App() {
    const [isDeleting, setIsDeleting] = React.useState(false);
    
    function deleteHandler() {
        setIsDeleting(true);
    }
    
    return (
      <div>
        <div id="alert">
          <h2>Are you sure?</h2>
          <p>These changes can't be reverted!</p>
          <button>Proceed</button>
        </div>
        <button onClick={deleteHandler}>Delete</button>
      </div>    
    );
}


The "Proceed" <button> should do the opposite:

import React from 'react';
 
// don't change the Component name "App"
export default function App() {
    const [isDeleting, setIsDeleting] = React.useState(false);
    
    function deleteHandler() {
        setIsDeleting(true);
    }
 
    function proceedHandler() {
        setIsDeleting(false);
    }
    
    return (
      <div>
        <div id="alert">
          <h2>Are you sure?</h2>
          <p>These changes can't be reverted!</p>
          <button onClick={proceedHandler}>Proceed</button>
        </div>
        <button onClick={deleteHandler}>Delete</button>
      </div>    
    );
}


Now, you're ready to show the <div id="alert">...</div> conditionally, based on the value of isDeleting. For example, via a ternary expression:

return (
  <div>
    {isDeleting ? <div id="alert">
      <h2>Are you sure?</h2>
      <p>These changes can't be reverted!</p>
      <button onClick={proceedHandler}>Proceed</button>
    </div> : ''}
    <button onClick={deleteHandler}>Delete</button>
  </div>    
);


Alternatively, you could use the && "trick":

return (
  <div>
    {isDeleting && <div id="alert">
      <h2>Are you sure?</h2>
      <p>These changes can't be reverted!</p>
      <button onClick={proceedHandler}>Proceed</button>
    </div>}
    <button onClick={deleteHandler}>Delete</button>
  </div>    
);


Or use an extra variable to keep the logic out of your JSX code:

import React from 'react';
 
// don't change the Component name "App"
export default function App() {
    const [isDeleting, setIsDeleting] = React.useState(false);
    
    function deleteHandler() {
        setIsDeleting(true);
    }
    
    function proceedHandler() {
        setIsDeleting(false);
    }
    
    let warning;
    
    if (isDeleting) {
        warning = (
            <div id="alert">
              <h2>Are you sure?</h2>
              <p>These changes can't be reverted!</p>
              <button onClick={proceedHandler}>Proceed</button>
            </div>
        );
    }
    
    return (
      <div>
        {warning}
        <button onClick={deleteHandler}>Delete</button>
      </div>    
    );
}

